Found 28 known vulnerabilities in 6 packages
{"dependencies": [{"name": "absl-py", "version": "2.3.1", "vulns": []}, {"name": "accelerate", "version": "1.10.1", "vulns": []}, {"name": "aiobotocore", "version": "2.25.0", "vulns": []}, {"name": "aiohappyeyeballs", "version": "2.6.1", "vulns": []}, {"name": "aiohttp", "version": "3.12.15", "vulns": []}, {"name": "aioitertools", "version": "0.12.0", "vulns": []}, {"name": "aiosignal", "version": "1.4.0", "vulns": []}, {"name": "alembic", "version": "1.17.0", "vulns": []}, {"name": "annotated-types", "version": "0.7.0", "vulns": []}, {"name": "anyio", "version": "4.11.0", "vulns": []}, {"name": "apache-airflow", "version": "2.7.3", "vulns": [{"id": "PYSEC-2024-14", "fix_versions": ["2.8.1"], "aliases": ["CVE-2023-50944"], "description": "Apache Airflow, versions before 2.8.1, have a vulnerability that allows an authenticated user to access the source code of a DAG to which they don't have access.\u00a0This vulnerability is considered low since it requires an authenticated user to exploit it. Users are recommended to upgrade to version 2.8.1, which fixes this issue. "}, {"id": "PYSEC-2024-13", "fix_versions": ["2.8.1"], "aliases": ["CVE-2023-50943"], "description": "Apache Airflow, versions before 2.8.1, have a vulnerability that allows a potential attacker to poison the XCom data by bypassing the protection of \"enable_xcom_pickling=False\" configuration setting resulting in poisoned data after XCom deserialization. This vulnerability is considered low since it requires a DAG author to exploit it. Users are recommended to upgrade to version 2.8.1 or later, which fixes this issue. "}, {"id": "PYSEC-2024-42", "fix_versions": ["2.8.2"], "aliases": ["CVE-2024-26280"], "description": "Apache Airflow, versions before 2.8.2, has a vulnerability that allows authenticated Ops and Viewers users to view all information on audit logs, including dag names and usernames they were not permitted to view.\u00a0With 2.8.2 and newer, Ops and Viewer users do not have audit log permission by default, they need to be explicitly granted permissions to see the logs. Only admin users have audit log permission by default.  Users of Apache Airflow are recommended to upgrade to version 2.8.2 or newer to mitigate the risk associated with this vulnerability"}, {"id": "PYSEC-2023-266", "fix_versions": ["2.8.0b1"], "aliases": ["CVE-2023-49920"], "description": "Apache Airflow, version 2.7.0 through 2.7.3, has a vulnerability that allows an attacker to trigger a DAG in a GET request without CSRF validation.\u00a0As a result, it was possible for a malicious website opened in the same browser - by the user who also had Airflow UI opened - to trigger the execution of DAGs without the user's consent. Users are advised to upgrade to version 2.8.0 or later which is not affected"}, {"id": "PYSEC-2023-267", "fix_versions": ["2.8.0"], "aliases": ["CVE-2023-50783"], "description": "Apache Airflow, versions before 2.8.0, is affected by a vulnerability that allows an authenticated user without the variable edit permission, to update a variable. This flaw compromises the integrity of variable management, potentially leading to unauthorized data modification. Users are recommended to upgrade to 2.8.0, which fixes this issue"}, {"id": "PYSEC-2023-264", "fix_versions": ["2.8.0b1"], "aliases": ["CVE-2023-47265"], "description": "Apache Airflow, versions 2.6.0 through 2.7.3 has a stored XSS vulnerability that allows a DAG author to add an unbounded and not-sanitized javascript in the parameter description field of the DAG.\u00a0This Javascript can be executed on the client side of any of the user who looks at the tasks in the browser sandbox. While this issue does not allow to exit the browser sandbox or manipulation of the server-side data - more than the DAG author already has, it allows to modify what the user looking at the DAG details sees in the browser - which opens up all kinds of possibilities of misleading other users.  Users of Apache Airflow are recommended to upgrade to version 2.8.0 or newer to mitigate the risk associated with this vulnerability "}, {"id": "PYSEC-2023-265", "fix_versions": ["2.8.0"], "aliases": ["CVE-2023-48291"], "description": "Apache Airflow, in versions prior to 2.8.0, contains a security vulnerability that allows an authenticated user with limited access to some DAGs, to craft a request that could give the user write access to various DAG resources for DAGs that the user had no access to, thus, enabling the user to clear DAGs they shouldn't.  This is a missing fix for CVE-2023-42792 in Apache Airflow 2.7.2\u00a0  Users of Apache Airflow are strongly advised to upgrade to version 2.8.0 or newer to mitigate the risk associated with this vulnerability."}, {"id": "PYSEC-2024-245", "fix_versions": ["2.8.2"], "aliases": ["CVE-2024-27906"], "description": "Apache Airflow, versions before 2.8.2, has a vulnerability that allows authenticated users to view DAG code and import errors of DAGs they do not have permission to view through the API and the UI.  Users of Apache Airflow are recommended to upgrade to version 2.8.2 or newer to mitigate the risk associated with this vulnerability"}, {"id": "PYSEC-2024-181", "fix_versions": ["2.10.0"], "aliases": ["CVE-2024-41937"], "description": "Apache Airflow, versions before 2.10.0, have a vulnerability that allows the developer of a malicious provider to execute a cross-site scripting attack when clicking on a provider documentation link. This would require the provider to be installed on the web server and the\u00a0user to click the provider link. Users should upgrade to 2.10.0 or later, which fixes this vulnerability."}, {"id": "PYSEC-2024-182", "fix_versions": ["2.10.3"], "aliases": ["CVE-2024-45784"], "description": "Apache Airflow versions before 2.10.3 contain a vulnerability that could expose sensitive configuration variables in task logs. This vulnerability allows DAG authors to unintentionally or intentionally log sensitive configuration variables. Unauthorized users could access these logs, potentially exposing critical data that could be exploited to compromise the security of the Airflow deployment. In version 2.10.3, secrets are now masked in task logs to prevent sensitive configuration variables from being exposed in the logging output. Users should upgrade to Airflow 2.10.3 or the latest version to eliminate this vulnerability.\u00a0If you suspect that DAG authors could have logged the secret values to the logs and that your logs are not additionally protected, it is also recommended that you update those secrets."}, {"id": "PYSEC-2024-190", "fix_versions": ["2.9.3"], "aliases": ["CVE-2024-39877"], "description": "Apache Airflow 2.4.0, and versions before 2.9.3, has a vulnerability that allows authenticated DAG authors to craft a doc_md parameter in a way that could execute arbitrary code in the scheduler context, which should be forbidden according to the Airflow Security model. Users should upgrade to version 2.9.3 or later which has removed the vulnerability."}, {"id": "PYSEC-2024-189", "fix_versions": ["2.9.3"], "aliases": ["CVE-2024-39863"], "description": "Apache Airflow versions before 2.9.3 have a vulnerability that allows an authenticated attacker to inject a malicious link when installing a provider. Users are recommended to upgrade to version 2.9.3, which fixes this issue. "}, {"id": "PYSEC-2024-195", "fix_versions": ["2.9.2"], "aliases": ["CVE-2024-25142"], "description": "Use of Web Browser Cache Containing Sensitive Information vulnerability in Apache Airflow.\u00a0  Airflow did not return \"Cache-Control\" header for dynamic content, which in case of some browsers could result in potentially storing sensitive data in local cache of the browser.  This issue affects Apache Airflow: before 2.9.2.  Users are recommended to upgrade to version 2.9.2, which fixes the issue.  "}, {"id": "PYSEC-2024-212", "fix_versions": ["2.10.1"], "aliases": ["CVE-2024-45034"], "description": "Apache Airflow versions before 2.10.1 have a vulnerability that allows\u00a0DAG authors to add local settings to the DAG folder and get it executed by the scheduler, where the scheduler is not supposed to execute code submitted by the DAG author.  Users are advised to upgrade to version 2.10.1 or later, which has fixed the vulnerability."}, {"id": "GHSA-2522-mrjc-m688", "fix_versions": ["2.9.0"], "aliases": ["CVE-2024-31869"], "description": "Airflow versions 2.7.0 through 2.8.4 have a vulnerability that allows an authenticated user to see sensitive provider configuration via the \"configuration\" UI page\u00a0when \"non-sensitive-only\" was set as \"webserver.expose_config\" configuration (The celery provider is the only community provider currently that has sensitive configurations). You should migrate to Airflow 2.9 or change your \"expose_config\" configuration to False as a workaround. This is similar, but different to  CVE-2023-46288 https://github.com/advisories/GHSA-9qqg-mh7c-chfq  which concerned API, not UI configuration page."}, {"id": "GHSA-j857-2pwm-jjmm", "fix_versions": ["2.10.3"], "aliases": ["CVE-2024-50378"], "description": "Airflow versions before 2.10.3 have a vulnerability that allows authenticated users with audit log access to see sensitive values in audit logs which they should not see.\u00a0When sensitive variables were set via airflow CLI, values of those variables appeared in the audit log and were stored unencrypted in the Airflow database. While this risk is limited to users with audit log access, it is recommended to upgrade to Airflow 2.10.3 or a later version, which addresses this issue. Users who previously used the CLI to set secret variables should manually delete entries with those variables from the log table."}]}, {"name": "apache-airflow-providers-common-sql", "version": "1.15.0", "vulns": [{"id": "GHSA-5r62-mjf5-xwhj", "fix_versions": ["1.24.1"], "aliases": ["CVE-2025-30473"], "description": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') vulnerability in Apache Airflow Common SQL Provider.  When using the partition clause in SQLTableCheckOperator as parameter (which was a recommended pattern), Authenticated UI User could inject arbitrary SQL command when triggering DAG exposing partition_clause to the user. This allowed the DAG Triggering user to escalate privileges to execute those arbitrary commands which they normally would not have.   This issue affects Apache Airflow Common SQL Provider: before 1.24.1.  Users are recommended to upgrade to version 1.24.1, which fixes the issue."}]}, {"name": "apache-airflow-providers-ftp", "version": "3.10.1", "vulns": []}, {"name": "apache-airflow-providers-http", "version": "4.12.0", "vulns": []}, {"name": "apache-airflow-providers-imap", "version": "3.6.1", "vulns": []}, {"name": "apache-airflow-providers-postgres", "version": "5.11.3", "vulns": []}, {"name": "apache-airflow-providers-sqlite", "version": "3.8.2", "vulns": []}, {"name": "apispec", "version": "6.8.4", "vulns": []}, {"name": "argcomplete", "version": "3.6.3", "vulns": []}, {"name": "argon2-cffi", "version": "25.1.0", "vulns": []}, {"name": "argon2-cffi-bindings", "version": "25.1.0", "vulns": []}, {"name": "arrow", "version": "1.3.0", "vulns": []}, {"name": "asgiref", "version": "3.10.0", "vulns": []}, {"name": "astrapy", "version": "2.1.0", "vulns": []}, {"name": "astroid", "version": "4.0.1", "vulns": []}, {"name": "asttokens", "version": "3.0.0", "vulns": []}, {"name": "async-lru", "version": "2.0.5", "vulns": []}, {"name": "attrs", "version": "25.4.0", "vulns": []}, {"name": "autopep8", "version": "2.3.2", "vulns": []}, {"name": "babel", "version": "2.17.0", "vulns": []}, {"name": "bandit", "version": "1.8.6", "vulns": []}, {"name": "beautifulsoup4", "version": "4.13.5", "vulns": []}, {"name": "black", "version": "25.9.0", "vulns": []}, {"name": "bleach", "version": "6.2.0", "vulns": []}, {"name": "blinker", "version": "1.9.0", "vulns": []}, {"name": "boolean-py", "version": "5.0", "vulns": []}, {"name": "botocore", "version": "1.40.49", "vulns": []}, {"name": "cachecontrol", "version": "0.14.3", "vulns": []}, {"name": "cachelib", "version": "0.13.0", "vulns": []}, {"name": "cachetools", "version": "6.2.0", "vulns": []}, {"name": "cassandra-driver", "version": "3.29.2", "vulns": []}, {"name": "cassio", "version": "0.1.10", "vulns": []}, {"name": "cattrs", "version": "25.3.0", "vulns": []}, {"name": "certifi", "version": "2025.8.3", "vulns": []}, {"name": "cffi", "version": "2.0.0", "vulns": []}, {"name": "cfgv", "version": "3.4.0", "vulns": []}, {"name": "charset-normalizer", "version": "3.4.3", "vulns": []}, {"name": "choreographer", "version": "1.1.2", "vulns": []}, {"name": "click", "version": "8.3.0", "vulns": []}, {"name": "clickclick", "version": "20.10.2", "vulns": []}, {"name": "cloudpickle", "version": "3.1.1", "vulns": []}, {"name": "colorama", "version": "0.4.6", "vulns": []}, {"name": "colorlog", "version": "4.8.0", "vulns": []}, {"name": "comm", "version": "0.2.3", "vulns": []}, {"name": "configupdater", "version": "3.2", "vulns": []}, {"name": "connexion", "version": "2.14.2", "vulns": []}, {"name": "contourpy", "version": "1.3.3", "vulns": []}, {"name": "coverage", "version": "7.10.7", "vulns": []}, {"name": "cron-descriptor", "version": "2.0.6", "vulns": []}, {"name": "croniter", "version": "6.0.0", "vulns": []}, {"name": "cryptography", "version": "46.0.1", "vulns": []}, {"name": "cycler", "version": "0.12.1", "vulns": []}, {"name": "cyclonedx-python-lib", "version": "9.1.0", "vulns": []}, {"name": "darts", "version": "0.38.0", "vulns": []}, {"name": "dataclasses-json", "version": "0.6.7", "vulns": []}, {"name": "datasets", "version": "4.2.0", "vulns": []}, {"name": "debugpy", "version": "1.8.17", "vulns": []}, {"name": "decorator", "version": "5.2.1", "vulns": []}, {"name": "defusedxml", "version": "0.7.1", "vulns": []}, {"name": "deprecated", "version": "1.2.18", "vulns": []}, {"name": "deprecation", "version": "2.1.0", "vulns": []}, {"name": "detect-secrets", "version": "1.5.0", "vulns": []}, {"name": "dill", "version": "0.4.0", "vulns": []}, {"name": "distlib", "version": "0.4.0", "vulns": []}, {"name": "distro", "version": "1.9.0", "vulns": []}, {"name": "dnspython", "version": "2.8.0", "vulns": []}, {"name": "duckdb", "version": "1.4.1", "vulns": []}, {"name": "email-validator", "version": "2.3.0", "vulns": []}, {"name": "et-xmlfile", "version": "2.0.0", "vulns": []}, {"name": "executing", "version": "2.2.1", "vulns": []}, {"name": "fakeredis", "version": "2.32.0", "vulns": []}, {"name": "fastapi", "version": "0.117.1", "vulns": []}, {"name": "fastjsonschema", "version": "2.21.2", "vulns": []}, {"name": "filelock", "version": "3.19.1", "vulns": []}, {"name": "flake8", "version": "7.3.0", "vulns": []}, {"name": "flask", "version": "2.2.5", "vulns": []}, {"name": "flask-appbuilder", "version": "4.3.6", "vulns": [{"id": "PYSEC-2025-15", "fix_versions": ["4.5.3"], "aliases": ["CVE-2025-24023", "GHSA-p8q5-cvwx-wvwp"], "description": "Flask-AppBuilder is an application development framework. Prior to 4.5.3, Flask-AppBuilder allows unauthenticated users to enumerate existing usernames by timing the response time from the server when brute forcing requests to login. This vulnerability is fixed in 4.5.3."}, {"id": "GHSA-j2pw-vp55-fqqj", "fix_versions": ["4.3.11"], "aliases": ["CVE-2024-25128"], "description": "### Impact When Flask-AppBuilder is set to AUTH_TYPE AUTH_OID, allows an attacker to forge an HTTP request, that could deceive the backend into using any requested OpenID service. This vulnerability could grant an attacker unauthorised privilege access if a custom OpenID service is deployed by the attacker and accessible by the backend.   This vulnerability is only exploitable when the application is using the old (deprecated 10 years ago) OpenID 2.0 authorization protocol (which is very different from the popular OIDC - Open ID Connect - popular protocol used today). Currently, this protocol is regarded as legacy, with significantly reduced usage and not supported for several years by major authorization providers.  ### Patches Upgrade to Flask-AppBuilder 4.3.11  ### Workarounds If upgrade is not possible add the following to your config:  ``` from flask import flash, redirect from flask_appbuilder import expose from flask_appbuilder.security.sqla.manager import SecurityManager from flask_appbuilder.security.views import AuthOIDView from flask_appbuilder.security.forms import LoginForm_oid  basedir = os.path.abspath(os.path.dirname(__file__))   class FixedOIDView(AuthOIDView):     @expose(\"/login/\", methods=[\"GET\", \"POST\"])     def login(self, flag=True):         form = LoginForm_oid()         if form.validate_on_submit():             identity_url = None             for provider in self.appbuilder.sm.openid_providers:                 if provider.get(\"url\") == form.openid.data:                     identity_url = form.openid.data             if identity_url is None:                 flash(self.invalid_login_message, \"warning\")                 return redirect(self.appbuilder.get_url_for_login)         return super().login(flag=flag)  class FixedSecurityManager(SecurityManager):     authoidview = FixedOIDView   FAB_SECURITY_MANAGER_CLASS = \"config.FixedSecurityManager\" ```"}, {"id": "GHSA-fw5r-6m3x-rh7p", "fix_versions": ["4.5.1"], "aliases": ["CVE-2024-45314"], "description": "### Impact Auth DB login form default cache directives allows browser to locally store sensitive data. This can be an issue on environments using shared computer resources.  ### Patches Upgrade flask-appbuilder to version 4.5.1  ### Workarounds If upgrading is not possible configure your web server to send the following HTTP headers for /login: \"Cache-Control\": \"no-store, no-cache, must-revalidate, max-age=0\" \"Pragma\": \"no-cache\" \"Expires\": \"0\"  "}, {"id": "GHSA-99pm-ch96-ccp2", "fix_versions": ["4.6.2"], "aliases": ["CVE-2025-32962"], "description": "### Impact Flask-AppBuilder prior to 4.6.2 would allow for a malicious unauthenticated actor to perform an open redirect by manipulating the Host header in HTTP requests.   ### Patches Flask-AppBuilder 4.6.2 introduced the `FAB_SAFE_REDIRECT_HOSTS` configuration variable, which allows administrators to explicitly define which domains are considered safe for redirection.  Examples: ``` FAB_SAFE_REDIRECT_HOSTS = [\"yourdomain.com\", \"sub.yourdomain.com\", \"*.yourcompany.com\"] ```  ### Workarounds Use a Reverse Proxy to Enforce Trusted Host Headers  ### References _Are there any links users can visit to find out more?_"}, {"id": "GHSA-765j-9r45-w2q2", "fix_versions": ["4.8.1"], "aliases": ["CVE-2025-58065"], "description": "### Impact When Flask-AppBuilder is configured to use OAuth, LDAP, or other non-database authentication methods, the password reset endpoint remains registered and accessible, despite not being displayed in the user interface. This allows an enabled user to reset their password and be able to create JWT tokens even after the user is disabled on the authentication provider.  ### Patches Upgrade to Flask-AppBuilder version 4.8.1 or later  ### Workarounds If immediate upgrade is not possible: - Manually disable password reset routes in the application configuration - Implement additional access controls at the web server or proxy level to block access to the reset my password URL. - Monitor for suspicious password reset attempts from disabled accounts"}]}, {"name": "flask-babel", "version": "2.0.0", "vulns": []}, {"name": "flask-caching", "version": "2.3.1", "vulns": []}, {"name": "flask-jwt-extended", "version": "4.7.1", "vulns": []}, {"name": "flask-limiter", "version": "3.12", "vulns": []}, {"name": "flask-login", "version": "0.6.3", "vulns": []}, {"name": "flask-session", "version": "0.8.0", "vulns": []}, {"name": "flask-sqlalchemy", "version": "2.5.1", "vulns": []}, {"name": "flask-wtf", "version": "1.2.2", "vulns": []}, {"name": "flexcache", "version": "0.3", "vulns": []}, {"name": "flexparser", "version": "0.4", "vulns": []}, {"name": "fonttools", "version": "4.60.0", "vulns": []}, {"name": "fqdn", "version": "1.5.1", "vulns": []}, {"name": "freezegun", "version": "1.5.5", "vulns": []}, {"name": "frozenlist", "version": "1.7.0", "vulns": []}, {"name": "fsspec", "version": "2025.9.0", "vulns": []}, {"name": "fuzzywuzzy", "version": "0.18.0", "vulns": []}, {"name": "geomet", "version": "0.2.1.post1", "vulns": []}, {"name": "geopandas", "version": "1.1.1", "vulns": []}, {"name": "google-re2", "version": "1.1.20250805", "vulns": []}, {"name": "googleapis-common-protos", "version": "1.71.0", "vulns": []}, {"name": "granite-tsfm", "skip_reason": "Dependency not found on PyPI and could not be audited: granite-tsfm (0.3.2.dev203+gb629ba41c)"}, {"name": "graphviz", "version": "0.21", "vulns": []}, {"name": "greenlet", "version": "3.2.4", "vulns": []}, {"name": "grpcio", "version": "1.75.1", "vulns": []}, {"name": "gunicorn", "version": "23.0.0", "vulns": []}, {"name": "h11", "version": "0.16.0", "vulns": []}, {"name": "h2", "version": "4.3.0", "vulns": []}, {"name": "holidays", "version": "0.82", "vulns": []}, {"name": "hpack", "version": "4.1.0", "vulns": []}, {"name": "httpcore", "version": "1.0.9", "vulns": []}, {"name": "httptools", "version": "0.6.4", "vulns": []}, {"name": "httpx", "version": "0.28.1", "vulns": []}, {"name": "httpx-sse", "version": "0.4.1", "vulns": []}, {"name": "huggingface-hub", "version": "0.35.1", "vulns": []}, {"name": "hyperframe", "version": "6.1.0", "vulns": []}, {"name": "hypothesis", "version": "6.140.3", "vulns": []}, {"name": "ibm-cloud-sdk-core", "version": "3.24.2", "vulns": []}, {"name": "ibm-cos-sdk", "version": "2.14.3", "vulns": []}, {"name": "ibm-cos-sdk-core", "version": "2.14.3", "vulns": []}, {"name": "ibm-cos-sdk-s3transfer", "version": "2.14.3", "vulns": []}, {"name": "ibm-watson-machine-learning", "version": "1.0.368", "vulns": []}, {"name": "ibm-watsonx-ai", "version": "1.3.39", "vulns": []}, {"name": "identify", "version": "2.6.15", "vulns": []}, {"name": "idna", "version": "3.10", "vulns": []}, {"name": "importlib-metadata", "version": "8.7.0", "vulns": []}, {"name": "inflection", "version": "0.5.1", "vulns": []}, {"name": "iniconfig", "version": "2.1.0", "vulns": []}, {"name": "interrogate", "version": "1.7.0", "vulns": []}, {"name": "ipykernel", "version": "6.30.1", "vulns": []}, {"name": "ipython", "version": "9.5.0", "vulns": []}, {"name": "ipython-pygments-lexers", "version": "1.1.1", "vulns": []}, {"name": "ipywidgets", "version": "8.1.7", "vulns": []}, {"name": "isoduration", "version": "20.11.0", "vulns": []}, {"name": "isort", "version": "7.0.0", "vulns": []}, {"name": "itsdangerous", "version": "2.2.0", "vulns": []}, {"name": "jedi", "version": "0.19.2", "vulns": []}, {"name": "jinja2", "version": "3.1.6", "vulns": []}, {"name": "jiter", "version": "0.11.0", "vulns": []}, {"name": "jmespath", "version": "1.0.1", "vulns": []}, {"name": "joblib", "version": "1.5.2", "vulns": []}, {"name": "json5", "version": "0.12.1", "vulns": []}, {"name": "jsonpatch", "version": "1.33", "vulns": []}, {"name": "jsonpointer", "version": "3.0.0", "vulns": []}, {"name": "jsonschema", "version": "4.25.1", "vulns": []}, {"name": "jsonschema-specifications", "version": "2025.9.1", "vulns": []}, {"name": "jupyter", "version": "1.1.1", "vulns": []}, {"name": "jupyter-client", "version": "8.6.3", "vulns": []}, {"name": "jupyter-console", "version": "6.6.3", "vulns": []}, {"name": "jupyter-core", "version": "5.8.1", "vulns": []}, {"name": "jupyter-events", "version": "0.12.0", "vulns": []}, {"name": "jupyter-lsp", "version": "2.3.0", "vulns": []}, {"name": "jupyter-server", "version": "2.17.0", "vulns": []}, {"name": "jupyter-server-terminals", "version": "0.5.3", "vulns": []}, {"name": "jupyterlab", "version": "4.4.8", "vulns": []}, {"name": "jupyterlab-pygments", "version": "0.3.0", "vulns": []}, {"name": "jupyterlab-server", "version": "2.27.3", "vulns": []}, {"name": "jupyterlab-widgets", "version": "3.0.15", "vulns": []}, {"name": "kaggle", "version": "1.7.4.5", "vulns": []}, {"name": "kaleido", "version": "1.1.0", "vulns": []}, {"name": "kiwisolver", "version": "1.4.9", "vulns": []}, {"name": "langchain", "version": "0.3.27", "vulns": []}, {"name": "langchain-astradb", "version": "0.6.1", "vulns": []}, {"name": "langchain-community", "version": "0.3.30", "vulns": []}, {"name": "langchain-core", "version": "0.3.76", "vulns": []}, {"name": "langchain-ibm", "version": "0.3.13", "vulns": []}, {"name": "langchain-text-splitters", "version": "0.3.11", "vulns": []}, {"name": "langgraph", "version": "1.0.1", "vulns": []}, {"name": "langgraph-checkpoint", "version": "3.0.0", "vulns": []}, {"name": "langgraph-prebuilt", "version": "1.0.1", "vulns": []}, {"name": "langgraph-sdk", "version": "0.2.9", "vulns": []}, {"name": "langsmith", "version": "0.4.31", "vulns": []}, {"name": "lark", "version": "1.3.0", "vulns": []}, {"name": "lasio", "version": "0.32", "vulns": []}, {"name": "lazy-object-proxy", "version": "1.12.0", "vulns": []}, {"name": "levenshtein", "version": "0.27.1", "vulns": []}, {"name": "license-expression", "version": "30.4.4", "vulns": []}, {"name": "lightning", "version": "2.5.5", "vulns": []}, {"name": "lightning-utilities", "version": "0.15.2", "vulns": []}, {"name": "limits", "version": "5.6.0", "vulns": []}, {"name": "line-profiler", "version": "5.0.0", "vulns": []}, {"name": "linkify-it-py", "version": "2.0.3", "vulns": []}, {"name": "lizard", "version": "1.18.0", "vulns": []}, {"name": "llvmlite", "version": "0.45.1", "vulns": []}, {"name": "lockfile", "version": "0.12.2", "vulns": []}, {"name": "logistro", "version": "1.1.0", "vulns": []}, {"name": "lomond", "version": "0.3.3", "vulns": []}, {"name": "lxml", "version": "6.0.2", "vulns": []}, {"name": "mako", "version": "1.3.10", "vulns": []}, {"name": "mando", "version": "0.7.1", "vulns": []}, {"name": "markdown", "version": "3.9", "vulns": []}, {"name": "markdown-it-py", "version": "4.0.0", "vulns": []}, {"name": "markupsafe", "version": "3.0.2", "vulns": []}, {"name": "marshmallow", "version": "3.26.1", "vulns": []}, {"name": "marshmallow-oneofschema", "version": "3.2.0", "vulns": []}, {"name": "marshmallow-sqlalchemy", "version": "0.26.1", "vulns": []}, {"name": "matplotlib", "version": "3.10.6", "vulns": []}, {"name": "matplotlib-inline", "version": "0.1.7", "vulns": []}, {"name": "mccabe", "version": "0.7.0", "vulns": []}, {"name": "mcp", "version": "1.17.0", "vulns": []}, {"name": "mdit-py-plugins", "version": "0.5.0", "vulns": []}, {"name": "mdurl", "version": "0.1.2", "vulns": []}, {"name": "memory-profiler", "version": "0.61.0", "vulns": []}, {"name": "meteostat", "version": "1.7.6", "vulns": []}, {"name": "minio", "version": "7.2.18", "vulns": []}, {"name": "mistune", "version": "3.1.4", "vulns": []}, {"name": "mmh3", "version": "5.2.0", "vulns": []}, {"name": "more-itertools", "version": "10.8.0", "vulns": []}, {"name": "mpmath", "version": "1.3.0", "vulns": []}, {"name": "msgpack", "version": "1.1.2", "vulns": []}, {"name": "msgspec", "version": "0.19.0", "vulns": []}, {"name": "multidict", "version": "6.6.4", "vulns": []}, {"name": "multiprocess", "version": "0.70.16", "vulns": []}, {"name": "mypy", "version": "1.18.2", "vulns": []}, {"name": "mypy-extensions", "version": "1.1.0", "vulns": []}, {"name": "narwhals", "version": "2.5.0", "vulns": []}, {"name": "nbclient", "version": "0.10.2", "vulns": []}, {"name": "nbconvert", "version": "7.16.6", "vulns": []}, {"name": "nbformat", "version": "5.10.4", "vulns": []}, {"name": "nbqa", "version": "1.9.1", "vulns": []}, {"name": "nest-asyncio", "version": "1.6.0", "vulns": []}, {"name": "networkx", "version": "3.5", "vulns": []}, {"name": "nfoursid", "version": "1.0.2", "vulns": []}, {"name": "nodeenv", "version": "1.9.1", "vulns": []}, {"name": "notebook", "version": "7.4.5", "vulns": []}, {"name": "notebook-shim", "version": "0.2.4", "vulns": []}, {"name": "numba", "version": "0.62.1", "vulns": []}, {"name": "numpy", "version": "2.3.3", "vulns": []}, {"name": "numpy-typing-compat", "version": "20250818.2.3", "vulns": []}, {"name": "openai", "version": "1.109.1", "vulns": []}, {"name": "openpyxl", "version": "3.1.5", "vulns": []}, {"name": "opentelemetry-api", "version": "1.38.0", "vulns": []}, {"name": "opentelemetry-exporter-otlp", "version": "1.38.0", "vulns": []}, {"name": "opentelemetry-exporter-otlp-proto-common", "version": "1.38.0", "vulns": []}, {"name": "opentelemetry-exporter-otlp-proto-grpc", "version": "1.38.0", "vulns": []}, {"name": "opentelemetry-exporter-otlp-proto-http", "version": "1.38.0", "vulns": []}, {"name": "opentelemetry-proto", "version": "1.38.0", "vulns": []}, {"name": "opentelemetry-sdk", "version": "1.38.0", "vulns": []}, {"name": "opentelemetry-semantic-conventions", "version": "0.59b0", "vulns": []}, {"name": "optype", "version": "0.14.0", "vulns": []}, {"name": "ordered-set", "version": "4.1.0", "vulns": []}, {"name": "orjson", "version": "3.11.3", "vulns": []}, {"name": "ormsgpack", "version": "1.11.0", "vulns": []}, {"name": "overrides", "version": "7.7.0", "vulns": []}, {"name": "packageurl-python", "version": "0.17.5", "vulns": []}, {"name": "packaging", "version": "25.0", "vulns": []}, {"name": "pandas", "version": "2.2.3", "vulns": []}, {"name": "pandas-stubs", "version": "2.3.2.250926", "vulns": []}, {"name": "pandocfilters", "version": "1.5.1", "vulns": []}, {"name": "parso", "version": "0.8.5", "vulns": []}, {"name": "pathspec", "version": "0.12.1", "vulns": []}, {"name": "patsy", "version": "1.0.1", "vulns": []}, {"name": "pdfminer-six", "version": "20250506", "vulns": []}, {"name": "pdfplumber", "version": "0.11.7", "vulns": []}, {"name": "pendulum", "version": "2.1.2", "vulns": []}, {"name": "pillow", "version": "11.3.0", "vulns": []}, {"name": "pint", "version": "0.25", "vulns": []}, {"name": "pip", "version": "25.2", "vulns": [{"id": "GHSA-4xh5-x5gv-qwph", "fix_versions": ["25.3"], "aliases": ["CVE-2025-8869"], "description": "### Summary  In the fallback extraction path for source distributions, `pip` used Python\u2019s `tarfile` module without verifying that symbolic/hard link targets resolve inside the intended extraction directory. A malicious sdist can include links that escape the target directory and overwrite arbitrary files on the invoking host during `pip install`.  ### Impact  Successful exploitation enables arbitrary file overwrite outside the build/extraction directory on the machine running `pip`. This can be leveraged to tamper with configuration or startup files and may lead to further code execution depending on the environment, but the direct, guaranteed impact is integrity compromise on the vulnerable system.  ### Conditions  The issue is triggered when installing an attacker-controlled sdist (e.g., from an index or URL) and the fallback extraction code path is used. No special privileges are required beyond running `pip install`; active user action is necessary.  ### Remediation  The [fix](https://github.com/pypa/pip/pull/13550) is available starting in pip `25.3`. Using a Python interpreter that implements the safe-extraction behavior described by **PEP 706** provides additional defense in depth for other `tarfile` issues but is not a substitute for upgrading pip for this specific flaw."}]}, {"name": "pip-api", "version": "0.0.34", "vulns": []}, {"name": "pip-audit", "version": "2.9.0", "vulns": []}, {"name": "pip-requirements-parser", "version": "32.0.1", "vulns": []}, {"name": "platformdirs", "version": "4.4.0", "vulns": []}, {"name": "playwright", "version": "1.55.0", "vulns": []}, {"name": "plotly", "version": "6.3.0", "vulns": []}, {"name": "pluggy", "version": "1.6.0", "vulns": []}, {"name": "pre-commit", "version": "4.3.0", "vulns": []}, {"name": "prison", "version": "0.2.1", "vulns": []}, {"name": "prometheus-client", "version": "0.23.1", "vulns": []}, {"name": "prompt-toolkit", "version": "3.0.52", "vulns": []}, {"name": "propcache", "version": "0.3.2", "vulns": []}, {"name": "prospecting-recommendations", "skip_reason": "Dependency not found on PyPI and could not be audited: prospecting-recommendations (0.1.0)"}, {"name": "protobuf", "version": "6.32.1", "vulns": []}, {"name": "psutil", "version": "7.1.0", "vulns": []}, {"name": "psycopg2-binary", "version": "2.9.11", "vulns": []}, {"name": "pure-eval", "version": "0.2.3", "vulns": []}, {"name": "py", "version": "1.11.0", "vulns": [{"id": "PYSEC-2022-42969", "fix_versions": [], "aliases": ["CVE-2022-42969", "GHSA-w596-4wvx-j9j6"], "description": "The py library through 1.11.0 for Python allows remote attackers to conduct a ReDoS (Regular expression Denial of Service) attack via a Subversion repository with crafted info data, because the InfoSvnCommand argument is mishandled."}]}, {"name": "py-cpuinfo", "version": "9.0.0", "vulns": []}, {"name": "py-serializable", "version": "2.1.0", "vulns": []}, {"name": "py-spy", "version": "0.4.1", "vulns": []}, {"name": "py4j", "version": "0.10.9.9", "vulns": []}, {"name": "pyarrow", "version": "21.0.0", "vulns": []}, {"name": "pycodestyle", "version": "2.14.0", "vulns": []}, {"name": "pycparser", "version": "2.23", "vulns": []}, {"name": "pycryptodome", "version": "3.23.0", "vulns": []}, {"name": "pydantic", "version": "2.12.3", "vulns": []}, {"name": "pydantic-core", "version": "2.41.4", "vulns": []}, {"name": "pydantic-settings", "version": "2.11.0", "vulns": []}, {"name": "pyee", "version": "13.0.0", "vulns": []}, {"name": "pyflakes", "version": "3.4.0", "vulns": []}, {"name": "pygments", "version": "2.19.2", "vulns": []}, {"name": "pyiceberg", "version": "0.10.0", "vulns": []}, {"name": "pyiceberg-core", "version": "0.6.0", "vulns": []}, {"name": "pyjwt", "version": "2.10.1", "vulns": []}, {"name": "pylint", "version": "4.0.0", "vulns": []}, {"name": "pymongo", "version": "4.15.1", "vulns": []}, {"name": "pymupdf", "version": "1.26.5", "vulns": []}, {"name": "pyngrok", "version": "7.4.1", "vulns": []}, {"name": "pyod", "version": "2.0.5", "vulns": []}, {"name": "pyogrio", "version": "0.11.1", "vulns": []}, {"name": "pyparsing", "version": "3.2.5", "vulns": []}, {"name": "pypdf2", "version": "3.0.1", "vulns": []}, {"name": "pypdfium2", "version": "4.30.0", "vulns": []}, {"name": "pyproj", "version": "3.7.2", "vulns": []}, {"name": "pyroaring", "version": "1.0.3", "vulns": []}, {"name": "pyspark", "version": "4.0.1", "vulns": []}, {"name": "pytest", "version": "8.4.2", "vulns": []}, {"name": "pytest-asyncio", "version": "1.2.0", "vulns": []}, {"name": "pytest-benchmark", "version": "5.1.0", "vulns": []}, {"name": "pytest-cov", "version": "7.0.0", "vulns": []}, {"name": "pytest-mock", "version": "3.15.1", "vulns": []}, {"name": "pytest-timeout", "version": "2.4.0", "vulns": []}, {"name": "python-daemon", "version": "3.1.2", "vulns": []}, {"name": "python-dateutil", "version": "2.9.0.post0", "vulns": []}, {"name": "python-dotenv", "version": "1.1.1", "vulns": []}, {"name": "python-json-logger", "version": "3.3.0", "vulns": []}, {"name": "python-levenshtein", "version": "0.27.1", "vulns": []}, {"name": "python-multipart", "version": "0.0.20", "vulns": []}, {"name": "python-nvd3", "version": "0.16.0", "vulns": []}, {"name": "python-pptx", "version": "1.0.2", "vulns": []}, {"name": "python-slugify", "version": "8.0.4", "vulns": []}, {"name": "pytokens", "version": "0.1.10", "vulns": []}, {"name": "pytorch-forecasting", "version": "1.5.0", "vulns": []}, {"name": "pytorch-lightning", "version": "2.5.2", "vulns": []}, {"name": "pytz", "version": "2025.2", "vulns": []}, {"name": "pytzdata", "version": "2020.1", "vulns": []}, {"name": "pywin32", "version": "311", "vulns": []}, {"name": "pywinpty", "version": "3.0.0", "vulns": []}, {"name": "pyyaml", "version": "6.0.3", "vulns": []}, {"name": "pyzmq", "version": "27.1.0", "vulns": []}, {"name": "radon", "version": "6.0.1", "vulns": []}, {"name": "rapidfuzz", "version": "3.14.1", "vulns": []}, {"name": "ratelimit", "version": "2.2.1", "vulns": []}, {"name": "redis", "version": "6.4.0", "vulns": []}, {"name": "referencing", "version": "0.36.2", "vulns": []}, {"name": "regex", "version": "2025.9.18", "vulns": []}, {"name": "requests", "version": "2.32.5", "vulns": []}, {"name": "requests-toolbelt", "version": "1.0.0", "vulns": []}, {"name": "responses", "version": "0.25.8", "vulns": []}, {"name": "rfc3339-validator", "version": "0.1.4", "vulns": []}, {"name": "rfc3986-validator", "version": "0.1.1", "vulns": []}, {"name": "rfc3987-syntax", "version": "1.1.0", "vulns": []}, {"name": "rich", "version": "13.9.4", "vulns": []}, {"name": "rich-argparse", "version": "1.7.1", "vulns": []}, {"name": "robotexclusionrulesparser", "version": "1.7.1", "vulns": []}, {"name": "rpds-py", "version": "0.27.1", "vulns": []}, {"name": "ruff", "version": "0.14.0", "vulns": []}, {"name": "s3fs", "version": "2025.9.0", "vulns": []}, {"name": "safetensors", "version": "0.6.2", "vulns": []}, {"name": "scikit-learn", "version": "1.7.2", "vulns": []}, {"name": "scipy", "version": "1.16.2", "vulns": []}, {"name": "scipy-stubs", "version": "1.16.2.3", "vulns": []}, {"name": "seaborn", "version": "0.13.2", "vulns": []}, {"name": "send2trash", "version": "1.8.3", "vulns": []}, {"name": "sentence-transformers", "version": "5.1.1", "vulns": []}, {"name": "setproctitle", "version": "1.3.7", "vulns": []}, {"name": "setuptools", "version": "80.9.0", "vulns": []}, {"name": "shap", "version": "0.49.1", "vulns": []}, {"name": "shapely", "version": "2.1.2", "vulns": []}, {"name": "simplejson", "version": "3.20.2", "vulns": []}, {"name": "six", "version": "1.17.0", "vulns": []}, {"name": "slicer", "version": "0.0.8", "vulns": []}, {"name": "slowapi", "version": "0.1.9", "vulns": []}, {"name": "snakeviz", "version": "2.2.2", "vulns": []}, {"name": "sniffio", "version": "1.3.1", "vulns": []}, {"name": "sortedcontainers", "version": "2.4.0", "vulns": []}, {"name": "soupsieve", "version": "2.8", "vulns": []}, {"name": "sqlalchemy", "version": "1.4.54", "vulns": []}, {"name": "sqlalchemy-jsonfield", "version": "1.0.2", "vulns": []}, {"name": "sqlalchemy-utils", "version": "0.42.0", "vulns": []}, {"name": "sqlparse", "version": "0.5.3", "vulns": []}, {"name": "sse-starlette", "version": "3.0.2", "vulns": []}, {"name": "stack-data", "version": "0.6.3", "vulns": []}, {"name": "starlette", "version": "0.48.0", "vulns": []}, {"name": "statsmodels", "version": "0.14.5", "vulns": []}, {"name": "stevedore", "version": "5.5.0", "vulns": []}, {"name": "strictyaml", "version": "1.7.3", "vulns": []}, {"name": "sympy", "version": "1.14.0", "vulns": []}, {"name": "tabulate", "version": "0.9.0", "vulns": []}, {"name": "tenacity", "version": "9.1.2", "vulns": []}, {"name": "tensorboard", "version": "2.20.0", "vulns": []}, {"name": "tensorboard-data-server", "version": "0.7.2", "vulns": []}, {"name": "tensorboardx", "version": "2.6.4", "vulns": []}, {"name": "termcolor", "version": "3.1.0", "vulns": []}, {"name": "terminado", "version": "0.18.1", "vulns": []}, {"name": "text-unidecode", "version": "1.3", "vulns": []}, {"name": "threadpoolctl", "version": "3.6.0", "vulns": []}, {"name": "tiktoken", "version": "0.11.0", "vulns": []}, {"name": "tinycss2", "version": "1.4.0", "vulns": []}, {"name": "tokenize-rt", "version": "6.2.0", "vulns": []}, {"name": "tokenizers", "version": "0.22.1", "vulns": []}, {"name": "toml", "version": "0.10.2", "vulns": []}, {"name": "tomli", "version": "2.3.0", "vulns": []}, {"name": "tomlkit", "version": "0.13.3", "vulns": []}, {"name": "torch", "version": "2.8.0", "vulns": []}, {"name": "torchmetrics", "version": "1.8.2", "vulns": []}, {"name": "tornado", "version": "6.5.2", "vulns": []}, {"name": "tqdm", "version": "4.67.1", "vulns": []}, {"name": "traitlets", "version": "5.14.3", "vulns": []}, {"name": "transformers", "version": "4.56.0", "vulns": []}, {"name": "ttm-battery", "skip_reason": "Dependency not found on PyPI and could not be audited: ttm-battery (0.1.0)"}, {"name": "types-python-dateutil", "version": "2.9.0.20250822", "vulns": []}, {"name": "types-pytz", "version": "2025.2.0.20250809", "vulns": []}, {"name": "types-pyyaml", "version": "6.0.12.20250915", "vulns": []}, {"name": "types-requests", "version": "2.32.4.20250913", "vulns": []}, {"name": "typing-extensions", "version": "4.15.0", "vulns": []}, {"name": "typing-inspect", "version": "0.9.0", "vulns": []}, {"name": "typing-inspection", "version": "0.4.2", "vulns": []}, {"name": "tzdata", "version": "2025.2", "vulns": []}, {"name": "uc-micro-py", "version": "1.0.3", "vulns": []}, {"name": "unicodecsv", "version": "0.14.1", "vulns": []}, {"name": "uri-template", "version": "1.3.0", "vulns": []}, {"name": "urllib3", "version": "2.5.0", "vulns": []}, {"name": "uuid6", "version": "2025.0.1", "vulns": []}, {"name": "uvicorn", "version": "0.37.0", "vulns": []}, {"name": "virtualenv", "version": "20.35.3", "vulns": []}, {"name": "vulture", "version": "2.14", "vulns": []}, {"name": "watchfiles", "version": "1.1.0", "vulns": []}, {"name": "wcwidth", "version": "0.2.14", "vulns": []}, {"name": "webcolors", "version": "24.11.1", "vulns": []}, {"name": "webencodings", "version": "0.5.1", "vulns": []}, {"name": "websocket-client", "version": "1.8.0", "vulns": []}, {"name": "websockets", "version": "15.0.1", "vulns": []}, {"name": "werkzeug", "version": "2.2.3", "vulns": [{"id": "PYSEC-2023-221", "fix_versions": ["2.3.8", "3.0.1"], "aliases": ["CVE-2023-46136", "GHSA-hrfv-mqp8-q5rw"], "description": "Werkzeug is a comprehensive WSGI web application library. If an upload of a file that starts with CR or LF and then is followed by megabytes of data without these characters: all of these bytes are appended chunk by chunk into internal bytearray and lookup for boundary is performed on growing buffer. This allows an attacker to cause a denial of service by sending crafted multipart data to an endpoint that will parse it. The amount of CPU time required can block worker processes from handling legitimate requests. This vulnerability has been patched in version 3.0.1."}, {"id": "GHSA-2g68-c3qc-8985", "fix_versions": ["3.0.3"], "aliases": ["CVE-2024-34069"], "description": "The debugger in affected versions of Werkzeug can allow an attacker to execute code on a developer's machine under some circumstances. This requires the attacker to get the developer to interact with a domain and subdomain they control, and enter the debugger PIN, but if they are successful it allows access to the debugger even if it is only running on localhost. This also requires the attacker to guess a URL in the developer's application that will trigger the debugger."}, {"id": "GHSA-f9vj-2wh5-fj8j", "fix_versions": ["3.0.6"], "aliases": ["CVE-2024-49766"], "description": "On Python < 3.11 on Windows, `os.path.isabs()` does not catch UNC paths like `//server/share`. Werkzeug's `safe_join()` relies on this check, and so can produce a path that is not safe, potentially allowing unintended access to data. Applications using Python >= 3.11, or not using Windows, are not vulnerable."}, {"id": "GHSA-q34m-jh98-gwm2", "fix_versions": ["3.0.6"], "aliases": ["CVE-2024-49767"], "description": "Applications using Werkzeug to parse `multipart/form-data` requests are vulnerable to resource exhaustion. A specially crafted form body can bypass the `Request.max_form_memory_size` setting.   The `Request.max_content_length` setting, as well as resource limits provided by deployment software and platforms, are also available to limit the resources used during a request. This vulnerability does not affect those settings. All three types of limits should be considered and set appropriately when deploying an application."}]}, {"name": "widgetsnbextension", "version": "4.0.14", "vulns": []}, {"name": "wrapt", "version": "1.17.3", "vulns": []}, {"name": "wtforms", "version": "3.0.1", "vulns": []}, {"name": "xarray", "version": "2025.10.1", "vulns": []}, {"name": "xenon", "version": "0.9.3", "vulns": []}, {"name": "xlsxwriter", "version": "3.2.9", "vulns": []}, {"name": "xmltodict", "version": "1.0.2", "vulns": []}, {"name": "xxhash", "version": "3.6.0", "vulns": []}, {"name": "yarl", "version": "1.20.1", "vulns": []}, {"name": "zipp", "version": "3.23.0", "vulns": []}, {"name": "zstandard", "version": "0.25.0", "vulns": []}], "fixes": []}
{"vulnerabilities": []}
