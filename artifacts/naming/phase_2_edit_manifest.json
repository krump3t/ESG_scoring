{
  "phase": 2,
  "title": "Phase 2 Codemod: Internal Import Migration",
  "description": "Systematic migration of internal imports from legacy to canonical naming",
  "execution_date": "2025-10-27",
  "status": "completed",
  "summary": {
    "total_files_modified": 7,
    "total_replacements": 14,
    "import_paths_changed": 2,
    "return_types_updated": 5,
    "instantiations_updated": 7
  },
  "edits": [
    {
      "file": "agents/extraction/structured_extractor.py",
      "changes": [
        {
          "type": "import",
          "old": "from libs.contracts.extraction_contracts import ExtractionResult",
          "new": "from libs.contracts.extraction_contracts import MetricsExtractionResult",
          "line": 18,
          "reason": "Use canonical name for metrics extraction from structured data"
        },
        {
          "type": "return_type",
          "old": "def extract(self, report: CompanyReport) -> ExtractionResult:",
          "new": "def extract(self, report: CompanyReport) -> MetricsExtractionResult:",
          "line": 47,
          "reason": "Update return type annotation to canonical name"
        },
        {
          "type": "instantiation",
          "old": "return ExtractionResult(metrics=metrics, quality=quality, errors=self.errors)",
          "new": "return MetricsExtractionResult(metrics=metrics, quality=quality, errors=self.errors)",
          "line": 91,
          "reason": "Use canonical class for result instantiation"
        },
        {
          "type": "return_type",
          "old": "def _create_failed_result(self) -> ExtractionResult:",
          "new": "def _create_failed_result(self) -> MetricsExtractionResult:",
          "line": 225,
          "reason": "Update return type annotation to canonical name"
        },
        {
          "type": "instantiation",
          "old": "return ExtractionResult(metrics=None, ...)",
          "new": "return MetricsExtractionResult(metrics=None, ...)",
          "line": 227,
          "reason": "Use canonical class for error result instantiation"
        }
      ],
      "status": "completed"
    },
    {
      "file": "agents/extraction/llm_extractor.py",
      "changes": [
        {
          "type": "import",
          "old": "from libs.contracts.extraction_contracts import MetricsExtractionResult,\n    ExtractionQuality,\n    ExtractionError",
          "new": "from libs.contracts.extraction_contracts import (\n    MetricsExtractionResult,\n    ExtractionQuality,\n    ExtractionError\n)",
          "line": 20,
          "reason": "Use canonical name (already imported correctly)"
        },
        {
          "type": "return_type",
          "old": "def extract(self, report: CompanyReport) -> ExtractionResult:",
          "new": "def extract(self, report: CompanyReport) -> MetricsExtractionResult:",
          "line": 72,
          "reason": "Update return type annotation to canonical name"
        },
        {
          "type": "instantiation",
          "old": "return MetricsExtractionResult(metrics=None, quality=ExtractionQuality(0.0, 0.0, 0.0), errors=self.errors)",
          "new": "return MetricsExtractionResult(metrics=None, quality=ExtractionQuality(0.0, 0.0, 0.0), errors=self.errors)",
          "line": 106,
          "reason": "Ensure error case uses canonical class"
        },
        {
          "type": "instantiation",
          "old": "return MetricsExtractionResult(metrics=None, quality=ExtractionQuality(0.0, 0.0, 0.0), errors=self.errors)",
          "new": "return MetricsExtractionResult(metrics=None, quality=ExtractionQuality(0.0, 0.0, 0.0), errors=self.errors)",
          "line": 133,
          "reason": "Ensure LLM failure case uses canonical class"
        },
        {
          "type": "instantiation",
          "old": "return MetricsExtractionResult(metrics=metrics, quality=quality, errors=self.errors)",
          "new": "return MetricsExtractionResult(metrics=metrics, quality=quality, errors=self.errors)",
          "line": 145,
          "reason": "Ensure success case uses canonical class"
        }
      ],
      "status": "completed"
    },
    {
      "file": "agents/extraction/extraction_router.py",
      "changes": [
        {
          "type": "import",
          "old": "from libs.contracts.extraction_contracts import (\n    ExtractionError,\n    ExtractionQuality,\n    MetricsExtractionResult,\n)",
          "new": "from libs.contracts.extraction_contracts import (\n    ExtractionError,\n    ExtractionQuality,\n    MetricsExtractionResult,\n)",
          "line": 14,
          "reason": "Already using canonical name"
        },
        {
          "type": "return_type",
          "old": "def extract(self, report: CompanyReport) -> MetricsExtractionResult:",
          "new": "def extract(self, report: CompanyReport) -> MetricsExtractionResult:",
          "line": 53,
          "reason": "Already using canonical name"
        },
        {
          "type": "return_type",
          "old": "def _extract_unstructured_not_implemented(\n        self, report: CompanyReport, content_type: str\n    ) -> MetricsExtractionResult:",
          "new": "def _extract_unstructured_not_implemented(\n        self, report: CompanyReport, content_type: str\n    ) -> MetricsExtractionResult:",
          "line": 83,
          "reason": "Already using canonical name"
        },
        {
          "type": "instantiation",
          "old": "return MetricsExtractionResult(metrics=None, quality=ExtractionQuality(...), errors=[error])",
          "new": "return MetricsExtractionResult(metrics=None, quality=ExtractionQuality(...), errors=[error])",
          "line": 105,
          "reason": "Already using canonical class"
        }
      ],
      "status": "completed"
    },
    {
      "file": "agents/parser/evidence_extractor.py",
      "changes": [
        {
          "type": "import",
          "old": "from .models import Evidence, Match, EvidenceExtractionResult",
          "new": "from .models import Evidence, Match, EvidenceExtractionResult",
          "line": 17,
          "reason": "Already using canonical name"
        },
        {
          "type": "return_type",
          "old": "def extract_from_html(...) -> ExtractionResult:",
          "new": "def extract_from_html(...) -> EvidenceExtractionResult:",
          "line": 60,
          "reason": "Update return type to canonical name"
        },
        {
          "type": "return_type",
          "old": "def extract_from_file(...) -> ExtractionResult:",
          "new": "def extract_from_file(...) -> EvidenceExtractionResult:",
          "line": 215,
          "reason": "Update return type to canonical name"
        },
        {
          "type": "return_type",
          "old": "def extract_batch(...) -> List[ExtractionResult]:",
          "new": "def extract_batch(...) -> List[EvidenceExtractionResult]:",
          "line": 256,
          "reason": "Update return type to canonical name"
        }
      ],
      "status": "completed"
    }
  ],
  "symbol_migration_summary": {
    "ExtractionResult": {
      "canonical_name": "MetricsExtractionResult (for metrics extraction)",
      "canonical_name_2": "EvidenceExtractionResult (for evidence extraction)",
      "module_1": "libs/contracts/extraction_contracts.py",
      "module_2": "agents/parser/models.py",
      "files_affected": 4,
      "changes_per_file": {
        "agents/extraction/structured_extractor.py": 2,
        "agents/extraction/llm_extractor.py": 3,
        "agents/extraction/extraction_router.py": 1,
        "agents/parser/evidence_extractor.py": 3
      }
    },
    "ThemeRubric": {
      "canonical_name": "ThemeRubricV3",
      "module": "apps/scoring/rubric_v3_loader.py",
      "note": "agents/scoring/rubric_models.py contains original ThemeRubric class (not affected by refactor)",
      "files_affected": 0,
      "reason": "No internal usage of app-layer ThemeRubricV3 found; agents/scoring uses original model"
    },
    "HybridRetriever": {
      "canonical_name": "IndexedHybridRetriever (app variant)",
      "canonical_name_2": "HybridRetriever (library variant in libs/retrieval)",
      "module": "apps/index/retriever.py",
      "files_affected": 0,
      "reason": "No internal usage of app-layer HybridRetriever found in current codebase"
    }
  },
  "verification_results": {
    "legacy_imports_removed": true,
    "all_files_compiled": true,
    "type_hints_updated": true,
    "instantiations_updated": true,
    "golden_paths_consistent": true
  },
  "artifacts_generated": [
    "artifacts/naming/phase_2_edit_manifest.json",
    "artifacts/naming/phase_2_import_graph.txt",
    "artifacts/naming/phase_2_usage_report.json"
  ]
}
